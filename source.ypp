%{
	#include <iostream>
	#include <sstream>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string>
	#include "source.hpp"
	#include "symbol_table.hpp"
	#include "hw5.hpp"
    
	using namespace std;
	using std::string;
	
	extern int yylex();
    void yyerror(const char*);
	bool is_number(const std::string& s);
	void printValue(yystype y);
	extern FILE* yyin;
	int yyparse();
	int str2int(string Text);
	string int2str(int Number);
	string reomve_quotes(string s);
	extern symbol_table s_table;
%}

%token PRINT READ IF TRUE FALSE NUM STRING ID SC LP LC RC LB RB FOREACH TYPE_INT TYPE_MATRIX IN WHILE
%right ASSIGN 
%right ELSE RP
%left CS
%left LOGIC_OR 
%left LOGIC_AND
%left REL_EQUAL
%left REL_NOT_EQUAL
%left REL_LESS_EQUAL
%left REL_GREATER_EQUAL
%left REL_LESS
%left REL_GREATER
%left PLUS 
%left MINUS
%left DIV 
%left MULT 
%right LOGIC_NOT



%%
Prog: 
		Stmt
;
Stmts: 	
		Stmts Stmt
	|	Stmt
;
Stmt: 	
		Stmt_ND
	|	Stmt_D
;
Stmt_D:	
		Type_More SC
	|	Lvalue ASSIGN Exp SC {
			if ($1.type!=$3.type){
				errSem();
			}
			s_table.set_type_and_value_of_element($1.name,$3.type,$3.value);
		}
	|	PRINT OutputSpecifier SC {
			if ($1.type=="STRING"){
				cout << reomve_quotes($1.value) << endl;
			}
			else{
				cout << $1.value << endl;
			}
		}
	|	READ ID SC {
			if (!s_table.is_element_in_table($2.name)){
				errSem();
			}
			string type = s_table.get_type_of_element($2.name);
			if (type!="INT" && type!="MATRIX"){
				errSem();
			}
			if (type=="INT"){
				string in;
				cin >> in;
				s_table.set_type_and_value_of_element($2.name,type,in);
			}
			if (type=="MATRIX"){
				string oldMatrix = s_table.get_value_of_element($2.name);
				/*int rows = count_rows(oldMatrix);
				int cols = count_cols(oldMatrix);
				int temp = 0;
				int tempCols = 1;
				string newMatrix = "[";
				string in;
				while (temp!=(cols*rows)){
					cin >> in;
					newMatrix+=in;
					if (tempCols<cols){
						newMatrix+=",";
						tempCols++;
					}
					else {
						newMatrix+=";"
						tempCols=1;
					}
					temp++
				}
				set_type_and_value_of_element($2.name,type,newMatrix);*/
			}		
		}
	|	LC Stmts RC
;
Type_More: 
		Type_Init
	|	Type_Init CS Type_More
;
Type_Init : 
		TYPE_INT Init {
			if ($2.type=="INT"){
					errSem();
				}
			}
	|	TYPE_MATRIX Init {
				if ($2.type=="MATRIX"){
					errSem();
				}
			}
;
Stmt_ND: 
		IF LP Bool RP Stmt {
			
		}
	|	IF LP Bool RP Stmt ELSE Stmt
	|	WHILE LP Bool RP Stmt
	|	FOREACH LP ID IN Exp RP Stmt
;
Exp: 	
		Exp PLUS Exp {
			//semantic checks
			if ($1.type != $3.type){
					errSem();
				}
			if (($1.type!="INT" && $1.type!="MATRIX") || 
				($3.type!="INT" && $3.type!="MATRIX")){
					errSem();
				}
			// -------------
			$$.type = $1.type;
			if ($1.type=="MATRIX" && $3.type=="MATRIX"){
				//TODO check dimensions of the matrices
				//TODO matrix1+matrix2
				}
			if ($1.type=="INT" && $3.type=="INT"){
				$$.value = int2str(str2int($1.value) + str2int($3.value));
				}
		}
	|	Exp MINUS Exp {
			//semantic checks
			if ($1.type != $3.type){
					errSem();
				}
			if (($1.type!="INT" && $1.type!="MATRIX") || 
				($3.type!="INT" && $3.type!="MATRIX")){
					errSem();
				}
			// -------------
			$$.type = $1.type;
			if ($1.type=="MATRIX" && $3.type=="MATRIX"){
				//TODO check dimensions of the matrices
				//TODO matrix1-matrix2
				}
			if ($1.type=="INT" && $3.type=="INT"){
				$$.value = int2str(str2int($1.value) - str2int($3.value));
				}
		}
	|	Exp DIV Exp {
			//semantic checks
			if ($1.type!="INT" || $1.type!="INT"){
					errSem();
				}
			// -------------
			$$.type = $1.type;
			if (str2int($3.value) == 0){
					errSem();		
				}
			$$.value = int2str(str2int($1.value) / str2int($3.value));
		}
	|	Exp MULT Exp {
			//semantic checks
			if (($1.type!="INT" && $1.type!="MATRIX") || 
				($3.type!="INT" && $3.type!="MATRIX")){
					errSem();
				}
			// -------------
			if ($1.type=="MATRIX" && $3.type=="MATRIX"){
				//TODO check dimensions of the matrices (multiplication..)
				//TODO matrix1*matrix2
				$$.type="MATRIX";
				}
			if ($1.type=="INT" && $3.type=="INT"){
				$$.value = int2str(str2int($1.value) * str2int($3.value));
				$$.type="INT";
				}
			if ($1.type=="INT" && $3.type=="MATRIX"){
				//TODO int*matrix
				$$.type="MATRIX";
				}
			if	($1.type=="MATRIX" && $3.type=="INT") {
				//TODO matrix*int
				$$.type="MATRIX";
				}
		}
	|	Matrix {
			//TODO matrix to string..
			$$.type="MATRIX";
		}
	|	Exp_NUM {
			if ($1.type!="INT"){
			errSem();
			}
			$$.value=$1.value;
			$$.type="INT";
		}
	|	ID {	
			$$.value=$1.value;
			$$.type=$1.type;
		}
	|	ID LB Exp CS Exp RB {
			if ($1.type!="MATRIX" || $3.type!="INT"
				|| $5.type!="INT"){
					errSem();
				}
			int row = str2int($3.value);
			int col = str2int($5.value);
			//check matrix dimensions
			//check row and col are ok
			
		$$.type="INT";
		}
	|	LP Exp RP {
			$$.value=$2.value;
			$$.type=$2.type;
		}
;
Exp_NUM: NUM {
		if ($1.type!="INT"){
			errSem();
		}
		$$.value=$1.value;
		$$.type="INT";
	}
;
Matrix: 
		LB Matrix_Row Matrix_Col RB 
;
Matrix_Col:  
	|	SC Matrix_Row
;
Matrix_Row: 
		Exp {
			if ($1.type != "INT"){
				errSem();
			}
		}
	|	Exp CS Matrix_Row {
			if ($1.type != "INT"){
				errSem();
			}
		}
;
Init: 	
		ID {
			$1.value="0";
			$1.type="INT";
			//add to table or change;
		}
	|	ID ASSIGN Exp {
			if ($1.type != "INT"){
				errSem();
			}
			$1.value=$3.value;
			$1.type="INT";
			//add to table or change...;
		}
	|	ID LP Exp_NUM CS Exp_NUM RP {
			if ($3.type != "INT" || $5.type != "INT"){
				errSem();
			}
			//initialize a matrix of zeros 
			//str2int($3.value) on $5.value matrix
			$1.type="MATRIX";
		}
	|	ID LP Exp_NUM CS Exp_NUM RP ASSIGN Exp {
			if ($8.type!="MATRIX"){
				errSem();
			}
			//initialize matrix
			//str2int($3.value) on $5.value matrix with Exp..
		}
;
Lvalue: 
		ID {
			if (!s_table.is_element_in_table($1.name)){
				errSem();
			}
			string type = s_table.get_type_of_element($1.name);
			
			if (type!="INT" && type!="MATRIX"){
				errSem();
			}
			$$.name = $1.name;
			$$.type = type;
		}
	|	ID LB Exp_NUM CS Exp_NUM RB {
			if (!s_table.is_element_in_table($1.name)){
				errSem();
			}
			string matrix = s_table.get_value_of_element($1.name);
			int row = str2int($3.value);
			int col = str2int($5.value);
			//check that row and col are ok with matrix's size
		}
;
Bool: 	
		Exp REL_EQUAL Exp 
	|	Exp REL_NOT_EQUAL Exp
	|	Exp REL_LESS_EQUAL Exp
	|	Exp REL_GREATER_EQUAL Exp
	|	Exp REL_LESS Exp
	|	Exp REL_GREATER Exp
	|	LOGIC_NOT Bool
	|	Bool LOGIC_AND Bool
	|	Bool LOGIC_OR Bool
	|	LP Bool RP
	|	TRUE
	|	FALSE
;
OutputSpecifier: 	
		ID {
			if (!s_table.is_element_in_table($1.name)){
				errSem();
			}
			$$.type = $1.type;
			$$.value = $1.value;
		}
	|	STRING {
			$$.type = $1.type;
			$$.value = $1.value;
		}
;

%%
symbol_table s_table = symbol_table();

void printValue(yystype y){
    cout <<y.name<<'|'<<y.type<<'|'<<y.value <<endl;
    return;
}

string reomve_quotes(string s){
	s.erase(0, 1);
	s.erase(s.length()-1,1);
	return s;
}

bool is_number(const std::string& s){
    std::string::const_iterator it = s.begin();
    while (it != s.end() && std::isdigit(*it)) ++it;
    return !s.empty() && it == s.end();
}
int str2int(string Text){
	int Number;
	if ( ! (istringstream(Text) >> Number) ) Number = 0;
	return Number;
}
string int2str(int Number){
	string Result;
	ostringstream convert;  
	convert << Number;
	Result = convert.str(); 
	return Result;
}
void yyerror(const char*){
	errSyn();
	exit(1);
}

int main(int argc, const char* argv[]){
    if(argc != 2){
	cout << "Usage: " << argv[0] << " " << "<SCRIPT FILE>" << endl;
	exit(1);
    }
    yyin = fopen(argv[1], "r");
    return yyparse();
}


